"use client"

import * as React from "react"
import { TrashIcon, LogOutIcon, SaveIcon } from "lucide-react"
import { EnhancedAlertDialog } from "./enhanced-alert-dialog"
import { ConfirmationDeleteDialog } from "./confirmation-delete-dialog"
import { OnboardingDialog } from "./onboarding-dialog"
import { type BaseAlertDialogProps, type ConfirmationDeleteDialogProps, type OnboardingDialogProps } from "./types"

// Composants sp√©cialis√©s pr√©d√©finis
export const ConfirmDialog = React.forwardRef<
  React.ComponentRef<typeof EnhancedAlertDialog>,
  Omit<BaseAlertDialogProps, "type" | "showIcon">
>(({ actionText = "Confirmer", ...props }, ref) => {
  return (
    <EnhancedAlertDialog
      ref={ref}
      type="question"
      showIcon
      actionText={actionText}
      {...props}
    />
  )
})

ConfirmDialog.displayName = "ConfirmDialog"

export const DeleteDialog = React.forwardRef<
  React.ComponentRef<typeof EnhancedAlertDialog>,
  Omit<BaseAlertDialogProps, "type" | "showIcon" | "actionVariant" | "icon">
>(({ 
  title = "Supprimer l'√©l√©ment", 
  description = "Cette action est irr√©versible. √ätes-vous s√ªr de vouloir supprimer cet √©l√©ment ?",
  actionText = "Supprimer",
  ...props 
}, ref) => {
  return (
    <EnhancedAlertDialog
      ref={ref}
      type="error"
      showIcon
      title={title}
      description={description}
      actionText={actionText}
      actionVariant="destructive"
      icon={TrashIcon}
      {...props}
    />
  )
})

DeleteDialog.displayName = "DeleteDialog"

export const LogoutDialog = React.forwardRef<
  React.ComponentRef<typeof EnhancedAlertDialog>,
  Omit<BaseAlertDialogProps, "type" | "showIcon" | "icon">
>(({ 
  title = "Se d√©connecter", 
  description = "√ätes-vous s√ªr de vouloir vous d√©connecter ?",
  actionText = "Se d√©connecter",
  ...props 
}, ref) => {
  return (
    <EnhancedAlertDialog
      ref={ref}
      type="warning"
      showIcon
      title={title}
      description={description}
      actionText={actionText}
      icon={LogOutIcon}
      {...props}
    />
  )
})

LogoutDialog.displayName = "LogoutDialog"

export const SaveDialog = React.forwardRef<
  React.ComponentRef<typeof EnhancedAlertDialog>,
  Omit<BaseAlertDialogProps, "type" | "showIcon" | "icon">
>(({ 
  title = "Sauvegarder les modifications", 
  description = "Voulez-vous enregistrer les modifications avant de continuer ?",
  actionText = "Sauvegarder",
  ...props 
}, ref) => {
  return (
    <EnhancedAlertDialog
      ref={ref}
      type="info"
      showIcon
      title={title}
      description={description}
      actionText={actionText}
      icon={SaveIcon}
      {...props}
    />
  )
})

SaveDialog.displayName = "SaveDialog"

export const InfoDialog = React.forwardRef<
  React.ComponentRef<typeof EnhancedAlertDialog>,
  Omit<BaseAlertDialogProps, "type" | "showIcon">
>(({ actionText = "D'accord", hideCancel = true, ...props }, ref) => {
  return (
    <EnhancedAlertDialog
      ref={ref}
      type="info"
      showIcon
      actionText={actionText}
      hideCancel={hideCancel}
      {...props}
    />
  )
})

InfoDialog.displayName = "InfoDialog"

export const SuccessDialog = React.forwardRef<
  React.ComponentRef<typeof EnhancedAlertDialog>,
  Omit<BaseAlertDialogProps, "type" | "showIcon">
>(({ actionText = "Parfait", hideCancel = true, ...props }, ref) => {
  return (
    <EnhancedAlertDialog
      ref={ref}
      type="success"
      showIcon
      actionText={actionText}
      hideCancel={hideCancel}
      {...props}
    />
  )
})

SuccessDialog.displayName = "SuccessDialog"

export const ErrorDialog = React.forwardRef<
  React.ComponentRef<typeof EnhancedAlertDialog>,
  Omit<BaseAlertDialogProps, "type" | "showIcon">
>(({ actionText = "Compris", hideCancel = true, ...props }, ref) => {
  return (
    <EnhancedAlertDialog
      ref={ref}
      type="error"
      showIcon
      actionText={actionText}
      hideCancel={hideCancel}
      {...props}
    />
  )
})

ErrorDialog.displayName = "ErrorDialog"

export const WarningDialog = React.forwardRef<
  React.ComponentRef<typeof EnhancedAlertDialog>,
  Omit<BaseAlertDialogProps, "type" | "showIcon">
>(({ actionText = "Continuer", ...props }, ref) => {
  return (
    <EnhancedAlertDialog
      ref={ref}
      type="warning"
      showIcon
      actionText={actionText}
      {...props}
    />
  )
})

WarningDialog.displayName = "WarningDialog"

export const CriticalDeleteDialog = React.forwardRef<
  React.ComponentRef<typeof ConfirmationDeleteDialog>,
  Omit<ConfirmationDeleteDialogProps, "actionText" | "title">
>(({ 
  confirmationText,
  description,
  actionText = "Supprimer d√©finitivement",
  title = "Suppression critique",
  ...props 
}, ref) => {
  const defaultDescription = description || (
    <>
      Cette action supprimera d√©finitivement <strong>{confirmationText}</strong> et toutes ses donn√©es associ√©es. 
      Cette op√©ration est irr√©versible et ne peut pas √™tre annul√©e.
    </>
  )

  return (
    <ConfirmationDeleteDialog
      ref={ref}
      title={title}
      description={defaultDescription}
      actionText={actionText}
      confirmationText={confirmationText}
      {...props}
    />
  )
})

CriticalDeleteDialog.displayName = "CriticalDeleteDialog"

// Composants d'onboarding sp√©cialis√©s
export const WelcomeOnboardingDialog = React.forwardRef<
  React.ComponentRef<typeof OnboardingDialog>,
  Omit<OnboardingDialogProps, "steps">
>(({ 
  trigger,
  onComplete,
  onSkip,
  ...props 
}, ref) => {
  const defaultSteps = [
    {
      title: "Bienvenue !",
      description: "D√©couvrez notre plateforme et ses fonctionnalit√©s con√ßues pour simplifier votre workflow de d√©veloppement.",
      image: "/dialog-content.png"
    },
    {
      title: "Interface intuitive",
      description: "Une interface moderne et intuitive qui s'adapte √† vos besoins et am√©liore votre productivit√© au quotidien.",
    },
    {
      title: "Composants avanc√©s",
      description: "Une biblioth√®que compl√®te de composants personnalisables et accessible, con√ßue avec les meilleures pratiques.",
    },
    {
      title: "Pr√™t √† commencer ?",
      description: "Vous avez maintenant toutes les cl√©s en main pour cr√©er des interfaces exceptionnelles. Bon d√©veloppement !",
    }
  ]

  return (
    <OnboardingDialog
      ref={ref}
      steps={defaultSteps}
      trigger={trigger}
      onComplete={onComplete}
      onSkip={onSkip}
      {...props}
    />
  )
})

WelcomeOnboardingDialog.displayName = "WelcomeOnboardingDialog"

export const FeatureOnboardingDialog = React.forwardRef<
  React.ComponentRef<typeof OnboardingDialog>,
  Omit<OnboardingDialogProps, "steps"> & { featureName?: string }
>(({ 
  featureName = "nouvelle fonctionnalit√©",
  trigger,
  onComplete,
  onSkip,
  ...props 
}, ref) => {
  const defaultSteps = [
    {
      title: `D√©couvrez ${featureName}`,
      description: `Une ${featureName} puissante qui va transformer votre fa√ßon de travailler et am√©liorer votre efficacit√©.`,
    },
    {
      title: "Comment √ßa fonctionne",
      description: "Suivez ces √©tapes simples pour ma√Ætriser cette fonctionnalit√© et l'int√©grer dans votre workflow quotidien.",
      content: (
        <ul className="list-disc list-inside space-y-1">
          <li>Acc√©dez √† la fonctionnalit√© depuis le menu principal</li>
          <li>Configurez les param√®tres selon vos besoins</li>
          <li>Explorez les options avanc√©es</li>
        </ul>
      )
    },
    {
      title: "Conseils d'utilisation",
      description: "Quelques astuces pour tirer le meilleur parti de cette fonctionnalit√© et optimiser votre productivit√©.",
      content: (
        <div className="p-3 bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-md">
          <p className="text-blue-800 dark:text-blue-200 text-sm">
            üí° <strong>Astuce :</strong> Utilisez les raccourcis clavier pour acc√©der rapidement aux fonctions principales.
          </p>
        </div>
      )
    },
    {
      title: "Vous √™tes pr√™t !",
      description: `F√©licitations ! Vous ma√Ætrisez maintenant ${featureName}. N'h√©sitez pas √† explorer et exp√©rimenter.`,
    }
  ]

  return (
    <OnboardingDialog
      ref={ref}
      steps={defaultSteps}
      trigger={trigger}
      onComplete={onComplete}
      onSkip={onSkip}
      completeText="C'est parti !"
      {...props}
    />
  )
})

FeatureOnboardingDialog.displayName = "FeatureOnboardingDialog"