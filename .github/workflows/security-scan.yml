name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level high
        continue-on-error: true

      - name: Generate audit report
        run: |
          pnpm audit --json > audit-results.json || true
          cat audit-results.json

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-results
          path: audit-results.json
          retention-days: 30

  # Code security scanning with Trivy
  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in filesystem mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Don't fail the job on vulnerabilities

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy for JSON output
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload detailed results
        uses: actions/upload-artifact@v4
        with:
          name: code-security-scan-results
          path: |
            trivy-results.sarif
            trivy-results.json
          retention-days: 30

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret detection

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}
        
      - name: Upload GitLeaks results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: results.sarif
          retention-days: 30

  # SAST (Static Application Security Testing)
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          config-file: ./.github/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript-typescript"

  # License compliance check
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          # Install license-checker if not already in package.json
          pnpm add --save-dev license-checker
          
          # Generate license report
          npx license-checker --json --out license-report.json
          
          # Check for problematic licenses
          npx license-checker --failOn 'GPL-3.0;AGPL-1.0;AGPL-3.0' --summary

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.json
          retention-days: 30

  # Security report aggregation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, license-scan]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: security-results/

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "Generated: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check if scan results exist and summarize
          if [ -f "security-results/dependency-audit-results/audit-results.json" ]; then
            echo "## Dependency Vulnerabilities" >> security-summary.md
            echo "\`\`\`json" >> security-summary.md
            cat security-results/dependency-audit-results/audit-results.json | jq '.metadata // {vulnerabilities: "No vulnerabilities found"}' >> security-summary.md
            echo "\`\`\`" >> security-summary.md
            echo "" >> security-summary.md
          fi
          
          if [ -f "security-results/code-security-scan-results/trivy-results.json" ]; then
            echo "## Code Security Issues" >> security-summary.md
            echo "Trivy scan completed. See detailed results in artifacts." >> security-summary.md
            echo "" >> security-summary.md
          fi
          
          if [ -f "security-results/license-report/license-report.json" ]; then
            echo "## License Compliance" >> security-summary.md
            echo "License report generated. See detailed results in artifacts." >> security-summary.md
            echo "" >> security-summary.md
          fi
          
          echo "## Recommendations" >> security-summary.md
          echo "1. Review and address any critical or high-severity vulnerabilities" >> security-summary.md
          echo "2. Update dependencies with known security issues" >> security-summary.md
          echo "3. Ensure no secrets are committed to the repository" >> security-summary.md
          echo "4. Verify all dependencies use approved licenses" >> security-summary.md
          
          cat security-summary.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('security-summary.md')) {
              console.log('No security summary found');
              return;
            }
            
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            const body = `## ðŸ”’ Security Scan Results
            
            ${summary}
            
            _Detailed scan results are available in the workflow artifacts._`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('ðŸ”’ Security Scan Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90