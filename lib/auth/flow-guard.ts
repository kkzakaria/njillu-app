import { createClient } from "@/lib/supabase/server";

/**
 * V√©rifie si l'utilisateur est dans un √©tat de r√©cup√©ration de mot de passe
 * Utilise les param√®tres d'URL pour d√©tecter un flux de reset valide
 */
export async function checkPasswordResetFlow() {
  const supabase = await createClient();
  
  try {
    // V√©rifier s'il y a une session de r√©cup√©ration en cours
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error || !session) {
      return { isValidResetFlow: false, shouldRedirect: true };
    }
    
    // V√©rifier si l'utilisateur est dans un √©tat de r√©cup√©ration
    // Supabase marque les sessions de r√©cup√©ration avec aud !== 'authenticated'
    if (session.user && session.user.aud !== 'authenticated') {
      return { 
        isValidResetFlow: true, 
        shouldRedirect: false,
        session 
      };
    }
    
    // Si l'utilisateur est compl√®tement authentifi√©, rediriger vers protected
    return { isValidResetFlow: false, shouldRedirect: true };
    
  } catch {
    return { isValidResetFlow: false, shouldRedirect: true };
  }
}

/**
 * V√©rifie si l'utilisateur peut acc√©der √† la page OTP de reset
 * S√âCURIS√â : V√©rifie qu'une demande OTP de r√©cup√©ration a √©t√© effectu√©e r√©cemment
 */
export async function checkOtpResetAccess(searchParams: URLSearchParams) {
  // V√©rifier la pr√©sence du param√®tre email (flux OTP standard)
  const email = searchParams.get('email');
  
  console.log('üîç checkOtpResetAccess - SearchParams:', Object.fromEntries(searchParams));
  console.log('üìß Email parameter:', email);
  
  // V√©rifier aussi les param√®tres de r√©cup√©ration traditionnels en premier (compatibilit√©)
  const token = searchParams.get('token');
  const type = searchParams.get('type');
  
  if (token && type === 'recovery') {
    console.log('‚úÖ Acc√®s OTP reset autoris√© - Token recovery traditionnel valide');
    return { isValidAccess: true, shouldRedirect: false };
  }
  
  // Pour le flux OTP moderne, email obligatoire
  if (!email) {
    console.log('‚ùå Acc√®s OTP reset refus√© - Email parameter manquant');
    return { isValidAccess: false, shouldRedirect: true };
  }
  
  // V√©rifier qu'il y a une session OTP en cours pour cet email
  const supabase = await createClient();
  try {
    const { data: { session } } = await supabase.auth.getSession();
    
    console.log('üîç Session state for reset OTP:', { 
      exists: !!session, 
      email: session?.user?.email,
      aud: session?.user?.aud,
      requestedEmail: email
    });
    
    // Si une session existe et correspond √† l'email demand√©
    if (session && session.user && session.user.email === email) {
      console.log('‚úÖ Acc√®s OTP reset autoris√© - Session OTP valide pour:', email);
      return { isValidAccess: true, shouldRedirect: false };
    }
    
    // V√©rifier l'√©tat de r√©cup√©ration de session (fallback pour autres flux)
    const resetFlowCheck = await checkPasswordResetFlow();
    if (resetFlowCheck.isValidResetFlow) {
      console.log('‚úÖ Acc√®s OTP reset autoris√© - √âtat de r√©cup√©ration valide');
      return { isValidAccess: true, shouldRedirect: false };
    }
    
    // S√âCURIT√â : Sans session OTP r√©cente = acc√®s refus√©
    // Ceci emp√™che l'acc√®s direct en construisant manuellement l'URL
    console.log('‚ùå Acc√®s OTP reset refus√© - Aucune session OTP/recovery r√©cente trouv√©e pour:', email);
    console.log('üõ°Ô∏è S√©curit√© : Acc√®s direct bloqu√©, redirection vers forgot-password');
    return { isValidAccess: false, shouldRedirect: true };
    
  } catch (error) {
    console.log('‚ùå Erreur v√©rification session OTP reset:', error);
    // En cas d'erreur, refuser l'acc√®s par s√©curit√©
    return { isValidAccess: false, shouldRedirect: true };
  }
}

/**
 * V√©rifie si l'utilisateur peut acc√©der √† la page de mise √† jour de mot de passe
 * N√©cessite un √©tat de r√©cup√©ration ou des param√®tres d'URL valides
 */
export async function checkUpdatePasswordAccess(searchParams: URLSearchParams) {
  // V√©rifier la pr√©sence des param√®tres de r√©cup√©ration
  const token = searchParams.get('token');
  const type = searchParams.get('type');
  
  // Si les param√®tres de r√©cup√©ration sont pr√©sents
  if (token && type === 'recovery') {
    return { isValidAccess: true, shouldRedirect: false };
  }
  
  // V√©rifier l'√©tat de r√©cup√©ration de session
  const resetFlowCheck = await checkPasswordResetFlow();
  if (resetFlowCheck.isValidResetFlow) {
    return { isValidAccess: true, shouldRedirect: false };
  }
  
  return { isValidAccess: false, shouldRedirect: true };
}

/**
 * V√©rifie si l'utilisateur peut acc√©der √† la page OTP d'inscription
 * S√âCURIS√â : V√©rifie qu'une demande OTP d'inscription a √©t√© effectu√©e r√©cemment
 */
export async function checkSignUpOtpAccess(searchParams: URLSearchParams) {
  // V√©rifier la pr√©sence du param√®tre email avec type=signup
  const email = searchParams.get('email');
  const type = searchParams.get('type');
  
  console.log('üîç checkSignUpOtpAccess - SearchParams:', Object.fromEntries(searchParams));
  console.log('üìß Email parameter:', email, 'Type:', type);
  
  // Param√®tres requis manquants
  if (!email || type !== 'signup') {
    console.log('‚ùå Acc√®s OTP inscription refus√© - Param√®tres manquants');
    return { isValidAccess: false, shouldRedirect: true };
  }
  
  // V√©rifier qu'il y a une session OTP en cours pour cet email
  const supabase = await createClient();
  try {
    const { data: { session } } = await supabase.auth.getSession();
    
    console.log('üîç Session state for signup OTP:', { 
      exists: !!session, 
      email: session?.user?.email,
      aud: session?.user?.aud,
      requestedEmail: email
    });
    
    // Si une session existe et correspond √† l'email demand√©
    if (session && session.user && session.user.email === email) {
      console.log('‚úÖ Acc√®s OTP inscription autoris√© - Session OTP valide pour:', email);
      return { isValidAccess: true, shouldRedirect: false };
    }
    
    // S√âCURIT√â : M√™me avec les bons param√®tres, sans session OTP r√©cente = acc√®s refus√©
    // Ceci emp√™che l'acc√®s direct en construisant manuellement l'URL
    console.log('‚ùå Acc√®s OTP inscription refus√© - Aucune session OTP r√©cente trouv√©e pour:', email);
    console.log('üõ°Ô∏è S√©curit√© : Acc√®s direct bloqu√©, redirection vers inscription');
    return { isValidAccess: false, shouldRedirect: true };
    
  } catch (error) {
    console.log('‚ùå Erreur v√©rification session OTP inscription:', error);
    // En cas d'erreur, refuser l'acc√®s par s√©curit√©
    return { isValidAccess: false, shouldRedirect: true };
  }
}

/**
 * V√©rifie si l'utilisateur peut acc√©der √† la page de succ√®s d'inscription
 * Utilise un flag temporaire en session ou des param√®tres d'URL
 */
export async function checkSignUpSuccessAccess(searchParams: URLSearchParams) {
  // V√©rifier la pr√©sence de param√®tres de confirmation
  const confirmationType = searchParams.get('type');
  const confirmed = searchParams.get('confirmed');
  
  // Si c'est une confirmation email, l'acc√®s est l√©gitime
  if (confirmationType === 'signup' || confirmed === 'true') {
    return { isValidAccess: true, shouldRedirect: false };
  }
  
  // Pour les cas o√π l'inscription vient de se faire sans email de confirmation
  // nous utiliserons un syst√®me de r√©f√©rence dans l'URL ou session
  const from = searchParams.get('from');
  if (from === 'signup' || from === 'signup-otp') {
    return { isValidAccess: true, shouldRedirect: false };
  }
  
  return { isValidAccess: false, shouldRedirect: true };
}

// Les fonctions de g√©n√©ration et validation de tokens custom ont √©t√© supprim√©es
// car nous utilisons maintenant le syst√®me natif de Supabase Auth OTP
// qui g√®re automatiquement la s√©curit√© des tokens

/**
 * Utilitaire pour extraire les param√®tres de recherche c√¥t√© serveur
 */
export function getSearchParamsFromRequest(request?: Request): URLSearchParams {
  if (!request) {
    return new URLSearchParams();
  }
  
  const url = new URL(request.url);
  return url.searchParams;
}